<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Mapping</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="/static/styles.css" rel="stylesheet">
  <style type="text/css">
    #literally {
      height: 600px;
    }
  </style>
</head>
<body>
  <div class="container-fluid">
    <br />
    <div class="row">
      <div class="input-group">
        <div class="col-sm-4">
          <input type="text" class="form-control" id="author" placeholder="Author"/>
        </div>
        <div class="col-sm-4">
           <span class="input-group-btn">
                <button class="btn btn-primary" id="send">Send</button>
                <button class="btn btn-default" id="previous">View previous</button>
                <button class="btn btn-danger" id="undo">Undo</button>
           </span>
        </div>
      </div>
    </div>
    <br />
    <div id="literally"></div>
  </div>

  <script src="/static/vendor.js"></script>
  <script type="text/javascript">
    var previousDrawing = null;
    var previousDrawingBlob = null;
    var img = new Image();
    img.src = '/static/MaskC.png';
    var bgShape = LC.createShape('Image', {x: 0, y: 0, image: img});
    var drawer = LC.init(document.getElementById('literally'), {
      imageURLPrefix: '/static/img',
      imageSize: {
        width: 1920,
        height: 1200
      },
      backgroundShapes: [
        bgShape
      ],
      tools: [
        LC.tools.Pencil,
        LC.tools.Eraser,
        LC.tools.Line,
        LC.tools.Rectangle,
        LC.tools.Polygon,
        LC.tools.Pan
      ]
    });

    drawer.on('shapeSave', function(ev) {
      if (ev.shape !== bgShape) {
        drawer.saveShape(bgShape);
      }
    }.bind(this));

    drawer.setZoom(0.47);

    var config = JSON.parse('<%- JSON.stringify({
      device: device
    })%>');

    $('#send').click(function(ev) {
      if ($('#author').val() == "") {
        toastr.error('Please enter author name', 'Validation error');
        return;
      }
      if (drawer.shapes.length === 0) {
        toastr.warning('Please draw something', 'No drawing');
        return;
      }
      toastr.info('Sending drawing...');
      drawer.getImage().toBlob(function(blob) {
        var author = $('#author').val();
        var data = new FormData();
        data.append('device', config.device);
        data.append('author', author);
        data.append('image', blob);
        $.ajax({
          url: '/api/drawing',
          method: 'POST',
          data: data,
          contentType: false,
          processData: false
        }).done(function(result) {
          drawer.clear();
          toastr.success(author + "'s drawing has been sent", 'Drawing ' + result['_id'] + ' sent');
          previousDrawing = result['_id'];
          previousDrawingBlob = result['blobId'];
        }.bind(this))
         .fail(function() {
           toastr.error('Please check WiFi connectivity', 'Network error');
         });
      }, 'image/png');
    });

    $('#previous').click(function() {
      if (!previousDrawingBlob) {
        toastr.error('No previous drawing', 'Error');
      }
      else {
        window.open('/image/' + previousDrawingBlob);
      }
    });

    $('#undo').click(function() {
      if (!previousDrawing) {
        toastr.error('No previous drawing', 'Error');
      }
      else {
        toastr.info('Undoing drawing ' + previousDrawing, 'Undoing drawing');
        $.ajax({
          url: '/api/drawing/' + previousDrawing,
          method: 'DELETE'
        }).done(function() {
          toastr.success('Deleted drawing ' + previousDrawing, 'Drawing deleted');
          previousDrawing = null;
          previousDrawingBlob = null;
        }).fail(function() {
          toastr.error("Can't delete drawing " + previousDrawing, 'Error');
        });
      }
    })
  </script>
</body>
</html>
